import { useState } from 'react';
import { ArrowLeft, ArrowRight, Save, SkipForward, Mic, CheckCircle, X } from 'lucide-react';
import { ResolvedGeneratedQuestion, QuestionGenerationResult } from '../../types';
import { Badge } from '../ui';
import { CollapsibleText } from '../ui/CollapsibleText';

interface GeneratedQuestionsProps {
  result: QuestionGenerationResult;
  onClose: () => void;
  onSaveQuestion: (question: ResolvedGeneratedQuestion) => void;
  onRecordAnswer: (question: ResolvedGeneratedQuestion) => void;
}

export const GeneratedQuestions = ({ 
  result, 
  onClose, 
  onSaveQuestion, 
  onRecordAnswer 
}: GeneratedQuestionsProps) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [savedQuestions, setSavedQuestions] = useState<Set<number>>(new Set());
  const [skippedQuestions, setSkippedQuestions] = useState<Set<number>>(new Set());

  const currentQuestion = result.questions[currentIndex];
  const isFirstQuestion = currentIndex === 0;
  const isLastQuestion = currentIndex === result.questions.length - 1;

  const nextQuestion = () => {
    if (!isLastQuestion) {
      setCurrentIndex(prev => prev + 1);
    }
  };

  const previousQuestion = () => {
    if (!isFirstQuestion) {
      setCurrentIndex(prev => prev - 1);
    }
  };

  const handleSave = () => {
    onSaveQuestion(currentQuestion);
    setSavedQuestions(prev => new Set([...prev, currentIndex]));
  };

  const handleSkip = () => {
    setSkippedQuestions(prev => new Set([...prev, currentIndex]));
    nextQuestion();
  };

  const handleRecord = () => {
    // Save the question first if not already saved
    if (!savedQuestions.has(currentIndex)) {
      handleSave();
    }
    onRecordAnswer(currentQuestion);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '#059669';
      case 'medium': return '#EA580C';
      case 'hard': return '#DC2626';
      default: return '#6B7280';
    }
  };

  return (
    <div className="bg-white rounded-lg border border-gray-200">
      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Generated Questions</h3>
            <p className="text-sm text-gray-500 mt-1">
              Question {currentIndex + 1} of {result.questions.length} â€¢ Generated by {result.provider}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Question Display */}
      <div className="p-6">
        <div className="mb-6">
          <div className="flex items-start justify-between mb-4">
            <Badge 
              variant="colored" 
              color={getDifficultyColor(currentQuestion.difficulty)}
              size="sm"
            >
              {currentQuestion.difficulty.charAt(0).toUpperCase() + currentQuestion.difficulty.slice(1)}
            </Badge>
            
            <div className="flex items-center space-x-2">
              {savedQuestions.has(currentIndex) && (
                <div className="flex items-center text-green-600">
                  <CheckCircle className="w-4 h-4 mr-1" />
                  <span className="text-sm">Saved</span>
                </div>
              )}
              {skippedQuestions.has(currentIndex) && (
                <span className="text-sm text-gray-500">Skipped</span>
              )}
            </div>
          </div>

          <h4 className="text-xl font-medium text-gray-900 mb-4">
            {currentQuestion.text}
          </h4>

          {/* Reasoning */}
          {currentQuestion.reasoning && (
            <div className="mb-4 p-3 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600">
                <span className="font-medium">Why this question: </span>
                <CollapsibleText text={currentQuestion.reasoning} wordLimit={20} />
              </p>
            </div>
          )}

          {/* Suggested Categories */}
          {currentQuestion.suggestedCategories.length > 0 && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-700 mb-2">Assesses:</p>
              <div className="flex flex-wrap gap-2">
                {currentQuestion.suggestedCategories.map((category) => (
                  <Badge
                    key={category.id}
                    variant="colored"
                    color={category.color}
                    size="sm"
                  >
                    {category.name}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Suggested Traits */}
          {currentQuestion.suggestedTraits.length > 0 && (
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">Evaluates:</p>
              <div className="flex flex-wrap gap-2">
                {currentQuestion.suggestedTraits.map((trait) => (
                  <Badge
                    key={trait.id}
                    variant="square"
                    size="sm"
                  >
                    {trait.name}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex justify-center space-x-3 mb-6">
          <button
            onClick={handleSkip}
            disabled={skippedQuestions.has(currentIndex) || isLastQuestion}
            className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <SkipForward className="w-4 h-4 mr-2" />
            Skip
          </button>
          
          <button
            onClick={handleSave}
            disabled={savedQuestions.has(currentIndex)}
            className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <Save className="w-4 h-4 mr-2" />
            {savedQuestions.has(currentIndex) ? 'Saved' : 'Save Question'}
          </button>

          <button
            onClick={handleRecord}
            className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
          >
            <Mic className="w-4 h-4 mr-2" />
            Record Answer
          </button>
        </div>

        {/* Navigation */}
        <div className="flex items-center justify-between">
          <button
            onClick={previousQuestion}
            disabled={isFirstQuestion}
            className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <ArrowLeft className="w-4 h-4 mr-1" />
            Previous
          </button>

          <div className="flex space-x-1">
            {result.questions.map((_, idx) => (
              <button
                key={idx}
                onClick={() => setCurrentIndex(idx)}
                className={`w-2 h-2 rounded-full transition-colors ${
                  idx === currentIndex 
                    ? 'bg-primary-600' 
                    : savedQuestions.has(idx)
                    ? 'bg-green-500'
                    : skippedQuestions.has(idx)
                    ? 'bg-gray-300'
                    : 'bg-gray-400'
                }`}
              />
            ))}
          </div>

          <button
            onClick={nextQuestion}
            disabled={isLastQuestion}
            className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Next
            <ArrowRight className="w-4 h-4 ml-1" />
          </button>
        </div>
      </div>
    </div>
  );
};