import { useState } from 'react';
import { ArrowLeft, ArrowRight, Save, SkipForward, Mic, CheckCircle, X, SaveAll, Check, Code, Briefcase, Building2 } from 'lucide-react';
import { ResolvedGeneratedQuestion, QuestionGenerationResult } from '../../types';
import { Badge } from '../ui';
import { CollapsibleText } from '../ui/CollapsibleText';

interface GeneratedQuestionsProps {
  result: QuestionGenerationResult & { 
    jobId?: string; 
    entityType?: string; 
    entityId?: string;
    company?: string;
    jobTitle?: string;
  };
  onClose: () => void;
  onSaveQuestion: (question: ResolvedGeneratedQuestion) => void;
  onSaveBulkQuestions: (questions: ResolvedGeneratedQuestion[]) => void;
  onRecordAnswer: (question: ResolvedGeneratedQuestion) => void;
}

export const GeneratedQuestions = ({ 
  result, 
  onClose, 
  onSaveQuestion, 
  onSaveBulkQuestions,
  onRecordAnswer 
}: GeneratedQuestionsProps) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [savedQuestions, setSavedQuestions] = useState<Set<number>>(new Set());
  const [selectedQuestions, setSelectedQuestions] = useState<Set<number>>(new Set());
  const [skippedQuestions, setSkippedQuestions] = useState<Set<number>>(new Set());
  const [bulkSaveMode, setBulkSaveMode] = useState(false);

  const currentQuestion = result.questions[currentIndex];
  const isFirstQuestion = currentIndex === 0;
  const isLastQuestion = currentIndex === result.questions.length - 1;

  const nextQuestion = () => {
    if (!isLastQuestion) {
      setCurrentIndex(prev => prev + 1);
    }
  };

  const previousQuestion = () => {
    if (!isFirstQuestion) {
      setCurrentIndex(prev => prev - 1);
    }
  };

  const handleSaveOne = async () => {
    try {
      await onSaveQuestion(currentQuestion);
      setSavedQuestions(prev => new Set([...prev, currentIndex]));
    } catch (error) {
      console.error('Failed to save question:', error);
    }
  };

  const handleSaveSelected = async () => {
    if (selectedQuestions.size === 0) return;

    const questionsToSave = Array.from(selectedQuestions).map(index => result.questions[index]);

    try {
      await onSaveBulkQuestions(questionsToSave);
      
      setSavedQuestions(prev => new Set([...prev, ...selectedQuestions]));
      setSelectedQuestions(new Set());
      setBulkSaveMode(false);
    } catch (error) {
      console.error('Failed to save questions:', error);
    }
  };

  const handleSaveAll = async () => {
    const unsavedQuestions = result.questions
      .map((q, index) => ({ question: q, index }))
      .filter(({ index }) => !savedQuestions.has(index));

    if (unsavedQuestions.length === 0) return;

    try {
      await onSaveBulkQuestions(unsavedQuestions.map(({ question }) => question));
      
      const newSavedIndexes = unsavedQuestions.map(({ index }) => index);
      setSavedQuestions(prev => new Set([...prev, ...newSavedIndexes]));
    } catch (error) {
      console.error('Failed to save all questions:', error);
    }
  };

  const handleSkip = () => {
    setSkippedQuestions(prev => new Set([...prev, currentIndex]));
    if (selectedQuestions.has(currentIndex)) {
      setSelectedQuestions(prev => {
        const newSet = new Set(prev);
        newSet.delete(currentIndex);
        return newSet;
      });
    }
    nextQuestion();
  };

  const handleRecord = () => {
    // Save the question first if not already saved
    if (!savedQuestions.has(currentIndex)) {
      handleSaveOne();
    }
    onRecordAnswer(currentQuestion);
  };

  const toggleQuestionSelection = (index: number) => {
    setSelectedQuestions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(index)) {
        newSet.delete(index);
      } else {
        newSet.add(index);
      }
      return newSet;
    });
  };

  const toggleBulkMode = () => {
    setBulkSaveMode(!bulkSaveMode);
    setSelectedQuestions(new Set());
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '#059669';
      case 'medium': return '#EA580C';
      case 'hard': return '#DC2626';
      default: return '#6B7280';
    }
  };

  const unsavedCount = result.questions.length - savedQuestions.size;

  return (
    <div className="bg-white rounded-lg border border-gray-200">
      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium text-gray-900">Generated Questions</h3>
            <p className="text-sm text-gray-500 mt-1">
              Question {currentIndex + 1} of {result.questions.length} â€¢ Generated by {result.provider}
            </p>
          </div>
          <div className="flex items-center space-x-3">
            {/* Bulk Save Toggle */}
            <button
              onClick={toggleBulkMode}
              className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg transition-colors ${
                bulkSaveMode
                  ? 'bg-primary-100 text-primary-700 border border-primary-300'
                  : 'bg-gray-100 text-gray-700 border border-gray-300'
              }`}
            >
              <Check className="w-4 h-4 mr-1" />
              {bulkSaveMode ? 'Exit Select Mode' : 'Select Mode'}
            </button>
            
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-500"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Bulk Actions Bar */}
        {bulkSaveMode && (
          <div className="mt-4 p-3 bg-gray-50 rounded-lg flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                {selectedQuestions.size} of {result.questions.length} selected
              </span>
              <button
                onClick={() => setSelectedQuestions(new Set(result.questions.map((_, i) => i).filter(i => !savedQuestions.has(i))))}
                className="text-sm text-primary-600 hover:text-primary-700"
              >
                Select All Unsaved
              </button>
              <button
                onClick={() => setSelectedQuestions(new Set())}
                className="text-sm text-gray-600 hover:text-gray-700"
              >
                Clear Selection
              </button>
            </div>
            <button
              onClick={handleSaveSelected}
              disabled={selectedQuestions.size === 0}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Save className="w-4 h-4 mr-2" />
              Save Selected ({selectedQuestions.size})
            </button>
          </div>
        )}
      </div>

                {/* Question Display */}
      <div className="p-6">
        <div className="mb-6">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center space-x-3">
              <Badge 
                variant="colored" 
                color={getDifficultyColor(currentQuestion.difficulty)}
                size="sm"
              >
                {currentQuestion.difficulty.charAt(0).toUpperCase() + currentQuestion.difficulty.slice(1)}
              </Badge>

              {/* Source Badge for Generated Questions */}
              {(currentQuestion.metadata || result.sourceType !== 'generated') && (
                <Badge
                  variant="square"
                  color={
                    result.sourceType === 'project' ? '#10B981' : 
                    result.sourceType === 'experience' ? '#8B5CF6' :
                    result.sourceType === 'job' ? '#3B82F6' : '#6B7280'
                  }
                  size="xs"
                  className="flex items-center gap-1"
                >
                  {result.sourceType === 'project' ? <Code className="w-3 h-3" /> : 
                   result.sourceType === 'experience' ? <Briefcase className="w-3 h-3" /> :
                   result.sourceType === 'job' ? <Building2 className="w-3 h-3" /> : null}
                  <span className="truncate max-w-[120px]">
                    {result.sourceType === 'job' && result.company && result.jobTitle ? 
                      `${result.company} - ${result.jobTitle}` :
                      currentQuestion.metadata?.displayName || 
                      currentQuestion.metadata?.entityId?.replace(/_/g, ' ') || 
                      result.sourceType.charAt(0).toUpperCase() + result.sourceType.slice(1)
                    }
                  </span>
                </Badge>
              )}
              
              {/* Selection Checkbox in Bulk Mode */}
              {bulkSaveMode && (
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={selectedQuestions.has(currentIndex)}
                    onChange={() => toggleQuestionSelection(currentIndex)}
                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                  />
                  <span className="text-sm text-gray-600">
                    {selectedQuestions.has(currentIndex) ? 'Selected' : 'Select this question'}
                  </span>
                </label>
              )}
            </div>
            
            <div className="flex items-center space-x-2">
              {savedQuestions.has(currentIndex) && (
                <div className="flex items-center text-green-600">
                  <CheckCircle className="w-4 h-4 mr-1" />
                  <span className="text-sm">Saved</span>
                </div>
              )}
              {skippedQuestions.has(currentIndex) && (
                <span className="text-sm text-gray-500">Skipped</span>
              )}
            </div>
          </div>

          <h4 className="text-xl font-medium text-gray-900 mb-4">
            {currentQuestion.text}
          </h4>

          {/* Reasoning */}
          {currentQuestion.reasoning && (
            <div className="mb-4 p-3 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600">
                <span className="font-medium">Why this question: </span>
                <CollapsibleText text={currentQuestion.reasoning} wordLimit={20} />
              </p>
            </div>
          )}

          {/* Suggested Categories */}
          {currentQuestion.suggestedCategories && currentQuestion.suggestedCategories.length > 0 && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-700 mb-2">Assesses:</p>
              <div className="flex flex-wrap gap-2">
                {currentQuestion.suggestedCategories.map((category) => (
                  <Badge
                    key={category.id}
                    variant="colored"
                    color={category.color}
                    size="sm"
                  >
                    {category.name}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Suggested Traits */}
          {currentQuestion.suggestedTraits && currentQuestion.suggestedTraits.length > 0 && (
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">Evaluates:</p>
              <div className="flex flex-wrap gap-2">
                {currentQuestion.suggestedTraits.map((trait) => (
                  <Badge
                    key={trait.id}
                    variant="square"
                    size="sm"
                  >
                    {trait.name}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        {!bulkSaveMode && (
          <div className="flex justify-center space-x-3 mb-6">
            <button
              onClick={handleSkip}
              disabled={skippedQuestions.has(currentIndex) || isLastQuestion}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <SkipForward className="w-4 h-4 mr-2" />
              Skip
            </button>
            
            <button
              onClick={handleSaveOne}
              disabled={savedQuestions.has(currentIndex)}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <Save className="w-4 h-4 mr-2" />
              {savedQuestions.has(currentIndex) ? 'Saved' : 'Save Question'}
            </button>

            <button
              onClick={handleRecord}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
            >
              <Mic className="w-4 h-4 mr-2" />
              Record Answer
            </button>
          </div>
        )}

        {/* Bulk Save All Button */}
        {!bulkSaveMode && unsavedCount > 1 && (
          <div className="flex justify-center mb-6">
            <button
              onClick={handleSaveAll}
              disabled={unsavedCount === 0}
              className="inline-flex items-center px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <SaveAll className="w-4 h-4 mr-2" />
              Save All Remaining ({unsavedCount})
            </button>
          </div>
        )}

        {/* Navigation */}
        <div className="flex items-center justify-between">
          <button
            onClick={previousQuestion}
            disabled={isFirstQuestion}
            className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <ArrowLeft className="w-4 h-4 mr-1" />
            Previous
          </button>

          {/* Question Indicators */}
          <div className="flex space-x-1">
            {result.questions.map((_, idx) => (
              <button
                key={idx}
                onClick={() => setCurrentIndex(idx)}
                className={`w-3 h-3 rounded-full transition-colors relative ${
                  idx === currentIndex 
                    ? 'bg-primary-600' 
                    : savedQuestions.has(idx)
                    ? 'bg-green-500'
                    : selectedQuestions.has(idx)
                    ? 'bg-blue-500'
                    : skippedQuestions.has(idx)
                    ? 'bg-gray-300'
                    : 'bg-gray-400'
                }`}
                title={
                  savedQuestions.has(idx) ? 'Saved' :
                  selectedQuestions.has(idx) ? 'Selected for bulk save' :
                  skippedQuestions.has(idx) ? 'Skipped' :
                  idx === currentIndex ? 'Current' : 'Not saved'
                }
              >
                {/* Selection indicator for bulk mode */}
                {bulkSaveMode && selectedQuestions.has(idx) && (
                  <Check className="w-2 h-2 text-white absolute top-0 left-0" />
                )}
              </button>
            ))}
          </div>

          <button
            onClick={nextQuestion}
            disabled={isLastQuestion}
            className="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Next
            <ArrowRight className="w-4 h-4 ml-1" />
          </button>
        </div>

        {/* Status Summary */}
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex items-center justify-center space-x-6 text-sm text-gray-600">
            <div className="flex items-center">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-2" />
              <span>{savedQuestions.size} Saved</span>
            </div>
            {selectedQuestions.size > 0 && (
              <div className="flex items-center">
                <div className="w-2 h-2 bg-blue-500 rounded-full mr-2" />
                <span>{selectedQuestions.size} Selected</span>
              </div>
            )}
            <div className="flex items-center">
              <div className="w-2 h-2 bg-gray-400 rounded-full mr-2" />
              <span>{unsavedCount} Remaining</span>
            </div>
            <div className="flex items-center">
              <div className="w-2 h-2 bg-gray-300 rounded-full mr-2" />
              <span>{skippedQuestions.size} Skipped</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};